/*
Given an integer (signed 32 bits), write a function to check whether it is a power of 4.

Example 1:
  Input: 16
  Output: true

Example 2:
  Input: 5
  Output: false
  Follow up: Could you solve it without loops/recursion?

4^0 = 1
4^1 = 4
4^2 = 8

Давайте сначала проверим, является ли num степенью двойки: x> 0 и (x & (-x)) == x

Теперь проблема состоит в том, чтобы различать четные степени двух (когда x - степень четырех) 
и нечетные степени двух (когда x не является степенью четыре). 

В двоичном представлении оба случая являются однобитными, за которыми следуют нули.

В чем разница ?
В первом случае (степень четыре) 1-бит находится в четной позиции: бит 0, бит 2, бит 4 и т. Д. 
Во втором случае в нечетной позиции.

Следовательно, степень четыре делала бы ноль в побитовом И с числом (101010 ... 10)

Насколько длинной должна быть последовательность  (101010...10) если х это целое число со знаком? 

32 бита.

Чтобы написать короче, в 8 символов вместо 32 обычно используют шестнадцатеричное представление

(101010...10) - 2 === (aaaaaaaa) - 16
​
*/

// Time O(1)
// Space O(1)
const isPowerOfFour = num => {
  if (num < 1) return false;
  return (num & -num) === num && (num & 0xaaaaaaaa) === 0;
};

// Time O(LogN)
// Space O(1)
const isPowerOfFour_II = num => {
  if (num === 0) return false;
  while (num % 4 === 0) num /= 4;
  return num === 1;
};
