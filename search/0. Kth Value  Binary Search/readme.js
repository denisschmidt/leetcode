/*

Преобразование других задач в «K-й наименьший элемент в отсортированной матрице»

Ключевым моментом для любого двоичного поиска является выяснение «Search Space». 
Для меня, я думаю, есть два вида «Search Space» - index и range (диапазон от наименьшего числа до самого большого числа).
Чаще всего, когда массив сортируется в одном направлении, мы можем использовать index как «Search Space», 
когда массив не отсортирован, и мы собираемся найти конкретное число, мы можем использовать «range».


Предполагаю, что входными данными являются два массива, отсортированные в порядке возрастания, обозначенные как a и b соответственно. 

Тогда матричные элементы могут быть вычислены с использованием арифметических операций двух элементов массива.
  1) Addition: matrix[i][j] = a[i'] + b[j']
  2) Subtraction: matrix[i][j] = a[i'] - b[j']
  3) Multiplication: matrix[i][j] = a[i'] * b[j']
  4) Division: matrix[i][j] = a[i'] / b[j']


Решение этой серий задач с использованием алгоритма бинарого поиска который по сути является частным случаем более общего 
алгоритма trial and error(проб и ошибок)

Основная идея алгоритма проб и ошибок на самом деле очень проста и представлена ​​ниже:

  Шаг 1: Построить вариант решения.
  Шаг 2: Проверьте, соответствует ли он нашим требованиям.
  Шаг 3: Если это так, примите решение; иначе откажитесь от него и повторите с шага 1.

Однако для эффективной работы этого алгоритма должны выполняться следующие два условия:

  Условие 1: у нас есть эффективный алгоритм проверки на шаге 2;
  Условие 2: пространство поиска, сформированное всеми возможными решениями, мало, или у нас есть эффективные способы пройти (или найти) это пространство, если оно большое.

Первое условие гарантирует, что каждая операция проверки может быть выполнена быстро, 
а второе условие ограничивает общее количество таких операций, которые необходимо выполнить. 

Объединение этих двух факторов гарантирует, что у нас будет эффективный алгоритм проб и ошибок 
(что также означает, что если какой-либо из них не может быть выполнен, вам, вероятно, 
    даже не стоит рассматривать этот алгоритм).


Ссылки:    
  https://leetcode.com/problems/k-th-smallest-prime-fraction/discuss/115819/Summary-of-solutions-for-problems-%22reducible%22-to-LeetCode-378
  https://leetcode.com/problems/find-k-th-smallest-pair-distance/discuss/109082/Approach-the-problem-using-the-%22trial-and-error%22-algorithm

*/
