/*

Преобразование других задач в «K-й наименьший элемент в отсортированной матрице»

Предполагаю, что входными данными являются два массива, отсортированные в порядке возрастания, обозначенные как a и b соответственно. 

Тогда матричные элементы могут быть вычислены с использованием арифметических операций двух элементов массива.
1) Addition: matrix[i][j] = a[i'] + b[j']
2) Subtraction: matrix[i][j] = a[i'] - b[j']
3) Multiplication: matrix[i][j] = a[i'] * b[j']
4) Division: matrix[i][j] = a[i'] / b[j']


Решение серий задач с использованием алгоритма бинарого поиска который по сути является частным случаем более общего 
алгоритма trial and error(проб и ошибок)

Основная идея алгоритма проб и ошибок на самом деле очень проста и представлена ​​ниже:

Шаг 1: Построить вариант решения.
Шаг 2: Проверьте, соответствует ли он нашим требованиям.
Шаг 3: Если это так, примите решение; иначе откажитесь от него и повторите с шага 1.

Однако для эффективной работы этого алгоритма должны выполняться следующие два условия:

Условие 1: у нас есть эффективный алгоритм проверки на шаге 2;
Условие 2: пространство поиска, сформированное всеми возможными решениями, мало, или у нас есть эффективные способы пройти (или найти) это пространство, если оно большое.

Первое условие гарантирует, что каждая операция проверки может быть выполнена быстро, 
а второе условие ограничивает общее количество таких операций, которые необходимо выполнить. 

Объединение этих двух факторов гарантирует, что у нас будет эффективный алгоритм проб и ошибок 
(что также означает, что если какой-либо из них не может быть выполнен, вам, вероятно, 
    даже не стоит рассматривать этот алгоритм).



Посмотрим на пример задачи 719. Найдите K-ю наименьшую дистанцию ​​пары 



*/
