/*

<< (Битовый сдвиг влево)
  Операторы битового сдвига принимают два операнда.
  Первый – это число для сдвига, а второй – количество битов, которые нужно сдвинуть в первом операнде.

  Левый сдвиг почти равен умножению на 2
  Битовый сдвиг << N обычно имеет тот же эффект, что и умножение на два N раз,

  Например:
  3 << 1 === 6
  3 << 2 === 12
  3 << 3 === 24

  Конечно, следует иметь в виду, что побитовые операторы работают только с 32-битными числами,
  поэтому верхний порог такого «умножения» ограничен:

  10000000000 << 1 === -1474836480, отброшен крайний-левый бит
  10000000000 * 2 ===  20000000000, обычное умножение


>> (Правый битовый сдвиг, переносящий знак)
  Правый сдвиг почти равен целочисленному делению на 2
  Битовый сдвиг >> N обычно имеет тот же результат, что и целочисленное деление на два N раз:

  Например:
  100 >> 1 === 50, деление на 2
  100 >> 2 === 25, деление на 2 два раза
  100 >> 3 === 12, деление на 2 три раза, целая часть от результата


>>> (Правый сдвиг с заполнением нулями)
  Этот оператор сдвигает биты первого операнда вправо. Лишние биты справа отбрасываются. Слева добавляются нулевые биты.
  Знаковый бит становится равным 0, поэтому результат всегда положителен.

  Для неотрицательных чисел правый сдвиг с заполнением нулями >>> и правый сдвиг с переносом знака >> дадут одинаковый результат
  Для отрицательных чисел – результат работы разный. Например, -9 >>> 2 даст 1073741821, в отличие от -9 >> 2 (даёт -3):



 */
